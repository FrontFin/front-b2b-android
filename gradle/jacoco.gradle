apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.10'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    tasks.create(name: 'jacocoDebugReport', type: JacocoReport, dependsOn: 'testDebugUnitTest') {

        group = "Reporting"
        description = "Generate Jacoco coverage report for the debug build."

        reports {
            html.enabled true
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*$ViewInjector*.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory.*',
                '**/*_Provide*Factory*.*',
                '**/*_ViewBinding*.*',
                '**/AutoValue_*.*',
                '**/R2.class',
                '**/R2$*.class',
                '**/*Directions$*',
                '**/*Directions.*',
                '**/*Binding.*',
                '**/FrontCatalogActivity*.*',
        ]

        def kClasses = "$buildDir/tmp/kotlin-classes/debug"
        def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)
        classDirectories.from = files(kotlinClasses)

        def sourceDirs = ["$projectDir/src/main/java",]
        sourceDirectories.from = files(sourceDirs)

        executionData.from = files(["$buildDir/jacoco/testDebugUnitTest.exec"])
    }
}